#!/usr/bin/env python3

from basecall_wrapper.__main__ import sort_fastq_by_readlength

###########
# GLOBALS #
###########

# from config
outdir = config['outdir']
raw_data = config['raw_data']
log_dir = config['log_dir']
flowcell = config['flowcell']
kit = config['kit']

# intermediate files
unzip_folder = os.path.join(outdir, 'unzipped_raw_data')
unzip_tmpfile = os.path.join(unzip_folder, 'tmp_file')
basecall_folder = os.path.join(outdir, 'basecalled')
basecall_tempfile = os.path.join(basecall_folder, 'tmp_file')
merged_folder = os.path.join(outdir, 'merged')
temp_fq = os.path.join(merged_folder, 'tmp.fq')
merged_fq = os.path.join(merged_folder, 'merged.fq')
sorted_fq = os.path.join(merged_folder, 'merged_sorted.fq')
final_fq = os.path.join(merged_folder, 'merged_sorted.fq.gz')
stats_dir = os.path.join(outdir, 'stats')
if not os.path.isdir(stats_dir):
    os.makedirs(stats_dir)

#########
# RULES #
#########

# master rule
rule all:
    input:
        final_fq        

# unzip raw data to temp folder
rule unzip:
    input:
        raw_data
    output:
        temp(touch(unzip_tmpfile)),
        folder = temp(unzip_folder)
    log:
        os.path.join(log_dir, 'unzip.log')
    shell:
        'tar xvf {input} -C {output.folder} &> {log}'

# basecall
rule basecall:
    input:
        unzip_folder
    output:
        temp(touch(basecall_tempfile)),
        folder = basecall_folder
    params:
        kit = kit,
        flowcell = flowcell
    threads:
        config['threads']
    shell:
        'read_fast5_basecaller.py '
        '--worker_threads {threads} '
        '--input {input} '
        '--save_path {output.folder} '
        '--flowcell {params.flowcell} '
        '--kit {params.kit} '
        '--recursive '
        '--output_format fastq '

# merge
rule merge:
    input:
        basecall_folder
    output:
        temp(temp_fq)
    shell:
        'cat {input}/workspace/*.fastq | '
        'sed -e \'/^[[:space:]]*$/d\' > '
        '{output}'

# reformat
rule reformat:
    input:
        temp_fq
    output:
        temp(merged_fq)
    params:
        memory = config['memory']
    log:
        os.path.join(log_dir, 'reformat.log')
    shell:
        'reformat.sh '
        '-Xmx{params.memory}g '
        'in={input} '
        'interleaved=f '
        'out={output} '
        'ow=t '
        'bhist={stats_dir}/bhist.txt '
        'qhist={stats_dir}/qhist.txt '
        'qchist={stats_dir}/qchist.txt '
        'aqhist={stats_dir}/aqhist.txt '
        'bqhist={stats_dir}/bqhist.txt '
        'lhist={stats_dir}/lhist.txt '
        'gchist={stats_dir}/gchist.txt '
        'gcbins=auto '
        '2> {log}'

# sort
rule sort:
    input:
        fq = merged_fq
    output:
        fq = temp(sorted_fq)
    run:
        sort_fastq_by_readlength(input.fq, output.fq)

# gzip
rule compress:
    input:
        sorted_fq
    output:
        final_fq
    log:
        os.path.join(log_dir, 'compress.log')
    shell:
        'gzip --best --to-stdout --verbose '
        '{input} > {output} 2> {log}'
